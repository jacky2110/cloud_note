<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/jdbc
		http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/cache
		http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
	
	<!-- 创建一个bean元素，对应刚才创建的类 -->
	<bean id="id_LoggerBean" class="cn.tedu.cloud_note.aspect.LoggerBean"></bean>
	
	<!-- 创建【切面】 -->
	<bean id="id_Advice" class="cn.tedu.cloud_note.aspect.Advice"/>
	
	
	<!-- 配置AOP -->
	<!-- 预期效果： -->
	<!-- 将cn.tedu.cloud_note.aspect.LoggerBean类中提供的logController()方法切入到cn.tedu.cloud_note.controller包及其子包下的所有类之前 -->
	<!-- 这样就可以在cn.tedu.cloud_note.controller包中的任何类的任何方法被调用之前，都执行logController()方法 -->
	<aop:config>
		<!-- 指定【切面】，也就是将要运行的代码所在的类 -->
		<aop:aspect ref="id_LoggerBean">
			<!-- 指定【切入点】 -->
			
			<!-- 使用aop:before设置在【某切入点】之前【执行某函数】 -->
			
			<!-- ■ 通过method指定要执行的函数 -->
			<!-- ■ 通过pointcut指定切入点，即在哪里执行method指定的函数 -->
			
			<!-- 使用within关键字，根据【包】或【类】进行匹配 -->
			<!-- 这里指定cn.tedu.cloud_note.controller包及其子包下的所有类 -->
			<!-- 如果写成cn.tedu.cloud_note.controller.*则表示不包含子包 -->
			<aop:before method="byWithin" pointcut="within(cn.tedu.cloud_note.controller..*)"/>
			
			<!-- 使用execution关键字，根据【包】【类】或【函数】进行匹配 -->
			<!-- 这里指定【不限返回值】【cn.tedu.cloud_note.controller包及其子包下】【名称不限】【参数个数和类型不限】的函数 -->
			<aop:before method="byExecution" pointcut="execution(* cn.tedu.cloud_note.controller..*(..))"/>
			
			<!-- 使用bean关键字，根据【类】进行匹配 -->
			<!-- 这里指定所有id以Controller结尾的类中的所有方法 -->
			<aop:before method="byBean" pointcut="bean(*Controller)"/>
		</aop:aspect>
			
		<!-- 指定【切面】，也就是将要运行的代码所在的类 -->
		<aop:aspect ref="id_Advice">
			<!-- 指定一个切入点，以便后续代码直接引用 -->
<!-- 			<aop:pointcut id="id_Pointcut" expression="execution(* cn.tedu.cloud_note.service..*(..))"/> -->
			
			<!-- 指定【前置通知】给哪个函数 -->
<!-- 			<aop:before method="beforeAdvice" pointcut-ref="id_Pointcut"/> -->
			
			<!-- 指定【正常返回通知】给哪个函数 -->
<!-- 			<aop:after-returning method="afterReturningAdvice" pointcut-ref="id_Pointcut"/> -->
			
			<!-- 指定【返回通知】给哪个函数 -->
<!-- 			<aop:after method="afterFinallyAdvice" pointcut-ref="id_Pointcut"/> -->
			
			<!-- 指定【异常返回通知】给哪个函数 -->
<!-- 			<aop:after-throwing method="afterThrowingAdvice" pointcut-ref="id_Pointcut"/> -->
			
			<!-- 指定【环绕通知】给哪个函数 -->
			<!-- <aop:around method="aroundAdvice" pointcut-ref="id_Pointcut"/> -->
		</aop:aspect>
	</aop:config>
	
	<!-- 开启AOP注解标记 -->
	<aop:aspectj-autoproxy/>
	
</beans>
